Practicing:-
===========>                    **Instance variable and Static variable**
                                  ---------------------------------------



1)public class InstanceVariable {
	
	public static void main(String[] args) {
		int id;                            //Declaring the Local variable
		System.out.println(id);

	}

}

Output;- it will print an "Error" because Local variable doesn't provide any default value.
--------
*Local Variable Means if we declare inside a method and outside a class it s called local variable.

*If we want to access local variable we have to intilize the values.

============================================================================================================================================

Example2:


public class InstanceVariable1  {
    
	int id;  //Instance variable
        String str;
	
	public static void main(String[] args) {
		//int id;
		//System.out.println(id);

                InstanceVariable1 cb=new InstanceVariable1();   //Creating an obj

               System.out.println(cb.id);
               
                System.out.println(cb.str);
	}

}

Output:- is 0==Because compiler will provide by default "0 for instance variable
--------
*Instance variable means if we declare inside a class and outside a block or method or constructor.

*To access an instance variable we have to create an object.

*Default valuse: for integer 0,for boolean false,for string it is null.

*Each variable allowcates a separate memory whenver create an object.it means does not modify the value

==============================================================================================================================================

3)public class StaticVariable {
    
	static int i;                                                      //Static variable

       public static void main(String[] args) {
		
 
     System.out.println(i);

     System.out.println(ClassObject.i);
	}

}


Output:-0,0
-------

*Static variable means When a variable is declared as static.if we declare inside a class and outside a method then its called satic variable.

*To access a static variable no need to create an object.

*We can call the static variable with the help of class name and refference variable.

*a single copy of the variable is created and shared among all objects at the class level.


==================================================================================================================================================0
       
                                                            **Constructor**

*Constructor means it is a special type of method but it doesn't have any return type.

*Constructor name must be same name as className

*it invokes Automatically when create is an object 

*constructor are three types

*No-Arg Constructor

*Parameterized Constructor

*Default Constructor

Note==Once a constructor is declared private, it cannot be accessed from outside the class.



                                  ** No-Arg Constructor**




public class Constructor {
	
	private String name;
	
	
	public Constructor() {           //constructor
		
		System.out.println("Constructor called");
		
		name="Govind";
	}
	
	public static void main(String[] args) {
		
		Constructor constr=new Constructor();         //creating an object of the constructor class 
		
		System.out.println(constr.name);              //constructor invoked while
	}
	

Output:-
=======
*Constructor called

*Govind

=================================================================================================================================================================

                                           **Parameterized_Constructor**


*Parameterized constructor means if we pass the parameters inside the paranthesis() then it is called parameterized constructor.

*its accept one or more parameters in constructor.


public class Parameterized_Constructor {

  String Languages;
 
  Parameterized_Constructor(String lang){

         System.out.println("constructor called");
	 
	 Languages=lang;

	 System.out.println(Languages+" Programming Language");
 }
 
 public static void main(String[] args) {
	 
	 Parameterized_Constructor paraconstr=new Parameterized_Constructor("java");
 }
 
}


Output:-
=======
Constructor called
java programming language

=======================================================================================================================================================================================
                                                      **Default constructor**

*If there is no constructor in a class then it is called default constructor.

*Automatically Compiler wil create default constructor.

*The default constructor initializes instance variables with default values. For example, the int variable will be initialized to 0




public class Deafult_Constructor {
	
	int a;
	  boolean b;

	  public static void main(String[] args) {

	    // calls default constructor
		Deafult_Constructor obj = new Deafult_Constructor();

	    System.out.println("Default Value:");
	    System.out.println("a = " + obj.a);
	    System.out.println("b = " + obj.b);
	  }

}

output:-
--------

Default Value:
a = 0
b = false

====================================================================================================================================================================================

                                                       **Getter & Setter method**


*The main scope of getter and setter methods is suppose if we have a private variable in one class we can not inherit them one class into another class but using these methods we can call them.


public class ClassA_Getter_Setter {
	
	private int rollno;
	private String name;
	
	public String getName() {
		return name;
	}
	
	public int getRollno() {
		return rollno;
	}
	
	public void setName(String n ) {
		name=n;
	}
    
	public void setRollno(int r) {
		rollno=r;
	}
}




**Here we are created new classB to access classA
--------------------------------------------------

  public class ClassB_Getter_Setter {

	public static void main(String[] args) {
		
		ClassA_Getter_Setter gs=new ClassA_Getter_Setter();
		gs.setName("Govind");
		gs.setRollno(17);
		
		System.out.println("Person Name is  :"+gs.getName());
		System.out.println("Person RollNum is :"+gs.getRollno());
	}

}

=====================================================================================================================================================================================
                                                      **Increment operator**

public class Increment_Operator {

	public static void main(String[] args) {
		
			    // declare variables
			    int a = 17;
			    int result1;

			    // original value
			    System.out.println("Value of a: " + a);

			    // increment operator
			    result1 = ++a;
			    
			    int result2 = a++;
			
			    System.out.println("After increment: " + result1);
			    
			    System.out.println("After increment:" + result2);
			    
			    System.out.println(a);

			    


	}

}


========================================================================================================================================================================================

                                                 **Decrement operator**


public class Decrement_Operator {

	public static void main(String[] args) {
		// declare variables
	  int b = 12;
	    int result2;

	    // original value
	    System.out.println("Value of a: " + b);

	    // increment operator
	    result2 = --b;
	    System.out.println("After decrement: " + result2);

	    System.out.println("Value of b: " + b);

	    
	}

}


==========================================================================================================================================================================================

                                            **Nested If**

class NestedIf
{   
    public static void main(String args[]) 
    { 
          int a=10; 
          int b=20; 
        
        if(a==10){ 
  
            if(b!=20){ 
                System.out.println("Successfully executes"); //Here inner if the condition is not true. Hence else part is executed.
            } 
            
            else{ 
                System.out.println("Execution Failed"); 
            } 
        } 
    } 
} 

Output:
-------
Execution Failed

=======================================================================================================================================================================================
                                            **SumOfDigits**


class SumOfDig 
{
	public static void main(String args[])
	{
		int[] num = {53, 54 , 13 , 23, 11};
		
		for(int val :num)
		{
			int digit1 = val /10 ;      //  (53/10=5)==val/10 is divides the number by 10, this shifts all digits to right and removes the last digit 

			int digit2 = val % 10 ;     //  (53%10=3)==val%10 when you divide the number by 10. So it is actually the last digit of the number	
			

                        int sum  = digit1 + digit2 ;


			
		System.out.println("Sum of the digits"+"  "+ num +"==>" + digit1 + "+" + digit2 + "==>" + sum  );
			
		}
 }
}





=================================================================================================================================================================
                                                   **PrimeNumber**

int i,n,count, j;
      n= 100;
      System.out.printf("Enter the n value is "+ n);
      System.out.printf("Prime numbers between 1 to n are ", n);
      for(j=2;j<=n;j++){
         count=0;
         for(i=1;i<=j;i++){
            if(j%i==0){
               count++;
            }
         }
         if(count==2)
         System.out.print(j+" ");
      }
